/**
 * Generated by orval v6.14.3 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { HTTPValidationError } from ".././model";
import { customInstance } from ".././custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Root
 */
export const rootGet = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<unknown>({ url: `/`, method: "get", signal }, options);
};

export const getRootGetQueryKey = () => [`/`] as const;

export const getRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof rootGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRootGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) =>
    rootGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>;
export type RootGetQueryError = unknown;

export const useRootGet = <
  TData = Awaited<ReturnType<typeof rootGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Say Hello
 */
export const sayHelloHelloNameGet = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown>({ url: `/hello/${name}`, method: "get", signal }, options);
};

export const getSayHelloHelloNameGetQueryKey = (name: string) => [`/hello/${name}`] as const;

export const getSayHelloHelloNameGetQueryOptions = <
  TData = Awaited<ReturnType<typeof sayHelloHelloNameGet>>,
  TError = HTTPValidationError
>(
  name: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof sayHelloHelloNameGet>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof sayHelloHelloNameGet>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSayHelloHelloNameGetQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof sayHelloHelloNameGet>>> = ({ signal }) =>
    sayHelloHelloNameGet(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, ...queryOptions };
};

export type SayHelloHelloNameGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof sayHelloHelloNameGet>>
>;
export type SayHelloHelloNameGetQueryError = HTTPValidationError;

export const useSayHelloHelloNameGet = <
  TData = Awaited<ReturnType<typeof sayHelloHelloNameGet>>,
  TError = HTTPValidationError
>(
  name: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof sayHelloHelloNameGet>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSayHelloHelloNameGetQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Line Callback
 */
export const lineCallbackCallbackLinePost = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<unknown>({ url: `/callback/line`, method: "post" }, options);
};

export const getLineCallbackCallbackLinePostMutationOptions = <
  TError = HTTPValidationError,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof lineCallbackCallbackLinePost>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof lineCallbackCallbackLinePost>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof lineCallbackCallbackLinePost>>,
    TVariables
  > = () => {
    return lineCallbackCallbackLinePost(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LineCallbackCallbackLinePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof lineCallbackCallbackLinePost>>
>;

export type LineCallbackCallbackLinePostMutationError = HTTPValidationError;

export const useLineCallbackCallbackLinePost = <
  TError = HTTPValidationError,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof lineCallbackCallbackLinePost>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getLineCallbackCallbackLinePostMutationOptions(options);

  return useMutation(mutationOptions);
};
